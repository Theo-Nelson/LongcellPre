#' @title coreDetect
#'
#' @description
#' @details
#'
#' @param path
#' @importFrom parallel detectCores
#' @export
coreDetect = function(cores){
  max_cores = detectCores()
  if(cores > max_cores){
    warning(paste(c("Distributed number of cores exceed the maximum, will use all ",
                    max_core, " cores for parallization!"),sep = ""))
    cores = max_cores
  }
  return(cores)
}

#' @title genes_distribute
#'
#' @description
#' @details
#'
#' @param path
#' @import dplyr
#' @importFrom
#' @export
genes_distribute = function(data,cores, gene_col = "gene"){
  if(cores == 1){
    return(list(data))
  }
  gene_read_num = data %>%
                  group_by(across(all_of(gene_col))) %>%
                  summarise(count = n()) %>% arrange(desc(count))
  colnames(gene_read_num)[colnames(gene_read_num) == gene_col] = "gene"

  unit = c(1:cores,cores:1)
  gene_read_num$group = rep(unit,(nrow(data) %/% length(unit) + 1))[1:nrow(data)]

  gene_list = (gene_read_num %>% group_by(group) %>% summarise(list(gene)))$gene

  data_split = lapply(gene_list,function(x){
    sub = data[data[,"gene_col"] %in% x,]
    return(sub)
  })
  return(data_split)
}

#' @title dataSplit
#'
#' @description
#' @details
#'
#' @param path
#' @import dplyr
#' @importFrom
#' @export
dataSplit = function(data,cores){
  cores = coreDetect(cores)

  num_splits <- cores
  group_size = ceiling(nrow(data)/num_splits)
  data_split <- split(data, rep(1:num_splits, each = group_size, length.out = nrow(data)))
  return(data_split)
}
